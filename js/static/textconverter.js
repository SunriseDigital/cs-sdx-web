/**
 * 日本語を処理する場合に必要になることが多いテキスト変換処理
 **/
(function(global){
var klass = 'textConverter';
if ((global.sdx=global.sdx||{})[klass]) return false;

/**
 * コンストラクタ
 *
 */
klass=global.sdx[klass]=function(){
	/**
	 * 変換テーブル
	 *
	 * @var object
	 */
	this._convertTable = {
		number: {
			full: {"０":"0","１":"1","２":"2","３":"3","４":"4","５":"5","６":"6","７":"7","８":"8","９":"9"},
			half: {"0":"０","1":"１","2":"２","3":"３","4":"４","5":"５","6":"６","7":"７","8":"８","9":"９"}
		},
		alphabet: {
			full: {"ａ":"a","ｂ":"b","ｃ":"c","ｄ":"d","ｅ":"e","ｆ":"f","ｇ":"g","ｈ":"h","ｉ":"i","ｊ":"j","ｋ":"k","ｌ":"l","ｍ":"m","ｎ":"n","ｏ":"o","ｐ":"p","ｑ":"q","ｒ":"r","ｓ":"s","ｔ":"t","ｕ":"u","ｖ":"v","ｗ":"w","ｘ":"x","ｙ":"y","ｚ":"z","Ａ":"A","Ｂ":"B","Ｃ":"C","Ｄ":"D","Ｅ":"E","Ｆ":"F","Ｇ":"G","Ｈ":"H","Ｉ":"I","Ｊ":"J","Ｋ":"K","Ｌ":"L","Ｍ":"M","Ｎ":"N","Ｏ":"O","Ｐ":"P","Ｑ":"Q","Ｒ":"R","Ｓ":"S","Ｔ":"T","Ｕ":"U","Ｖ":"V","Ｗ":"W","Ｘ":"X","Ｙ":"Y","Ｚ":"Z"},
			half: {"a":"ａ","b":"ｂ","c":"ｃ","d":"ｄ","e":"ｅ","f":"ｆ","g":"ｇ","h":"ｈ","i":"ｉ","j":"ｊ","k":"ｋ","l":"ｌ","m":"ｍ","n":"ｎ","o":"ｏ","p":"ｐ","q":"ｑ","r":"ｒ","s":"ｓ","t":"ｔ","u":"ｕ","v":"ｖ","w":"ｗ","x":"ｘ","y":"ｙ","z":"ｚ","A":"Ａ","B":"Ｂ","C":"Ｃ","D":"Ｄ","E":"Ｅ","F":"Ｆ","G":"Ｇ","H":"Ｈ","I":"Ｉ","J":"Ｊ","K":"Ｋ","L":"Ｌ","M":"Ｍ","N":"Ｎ","O":"Ｏ","P":"Ｐ","Q":"Ｑ","R":"Ｒ","S":"Ｓ","T":"Ｔ","U":"Ｕ","V":"Ｖ","W":"Ｗ","X":"Ｘ","Y":"Ｙ","Z":"Ｚ"}
		},
		katakana: {
			full: {"ガ":"ｶﾞ","ギ":"ｷﾞ","グ":"ｸﾞ","ゲ":"ｹﾞ","ゴ":"ｺﾞ","ザ":"ｻﾞ","ジ":"ｼﾞ","ズ":"ｽﾞ","ゼ":"ｾﾞ","ゾ":"ｿﾞ","ダ":"ﾀﾞ","ヂ":"ﾁﾞ","ヅ":"ﾂﾞ","デ":"ﾃﾞ","ド":"ﾄﾞ","バ":"ﾊﾞ","ビ":"ﾋﾞ","ブ":"ﾌﾞ","ベ":"ﾍﾞ","ボ":"ﾎﾞ","パ":"ﾊﾟ","ピ":"ﾋﾟ","プ":"ﾌﾟ","ペ":"ﾍﾟ","ポ":"ﾎﾟ","ヲ":"ｦ","ァ":"ｧ","ィ":"ｨ","ゥ":"ｩ","ェ":"ｪ","ォ":"ｫ","ャ":"ｬ","ュ":"ｭ","ョ":"ｮ","ッ":"ｯ","ー":"ｰ","ア":"ｱ","イ":"ｲ","ウ":"ｳ","エ":"ｴ","オ":"ｵ","カ":"ｶ","キ":"ｷ","ク":"ｸ","ケ":"ｹ","コ":"ｺ","サ":"ｻ","シ":"ｼ","ス":"ｽ","セ":"ｾ","ソ":"ｿ","タ":"ﾀ","チ":"ﾁ","ツ":"ﾂ","テ":"ﾃ","ト":"ﾄ","ナ":"ﾅ","ニ":"ﾆ","ヌ":"ﾇ","ネ":"ﾈ","ノ":"ﾉ","ハ":"ﾊ","ヒ":"ﾋ","フ":"ﾌ","ヘ":"ﾍ","ホ":"ﾎ","マ":"ﾏ","ミ":"ﾐ","ム":"ﾑ","メ":"ﾒ","モ":"ﾓ","ヤ":"ﾔ","ユ":"ﾕ","ヨ":"ﾖ","ラ":"ﾗ","リ":"ﾘ","ル":"ﾙ","レ":"ﾚ","ロ":"ﾛ","ワ":"ﾜ","ン":"ﾝ","ヴ":"ｳﾞ","゛":"ﾞ","゜":"ﾟ"},
			half: {"カ゛":"ガ","キ゛":"ギ","ク゛":"グ","ケ゛":"ゲ","コ゛":"ゴ","サ゛":"ザ","シ゛":"ジ","ス゛":"ズ","セ゛":"ゼ","ソ゛":"ゾ","タ゛":"ダ","チ゛":"ヂ","ツ゛":"ヅ","テ゛":"デ","ト゛":"ド","ハ゛":"バ","ヒ゛":"ビ","フ゛":"ブ","ヘ゛":"ベ","ホ゛":"ボ","ハ゜":"パ","ヒ゜":"ピ","フ゜":"プ","ヘ゜":"ペ","ホ゜":"ポ","ｦ":"ヲ","ｧ":"ァ","ｨ":"ィ","ｩ":"ゥ","ｪ":"ェ","ｫ":"ォ","ｬ":"ャ","ｭ":"ュ","ｮ":"ョ","ｯ":"ッ","ｰ":"ー","ｱ":"ア","ｲ":"イ","ｳ":"ウ","ｴ":"エ","ｵ":"オ","ｶ":"カ","ｷ":"キ","ｸ":"ク","ｹ":"ケ","ｺ":"コ","ｻ":"サ","ｼ":"シ","ｽ":"ス","ｾ":"セ","ｿ":"ソ","ﾀ":"タ","ﾁ":"チ","ﾂ":"ツ","ﾃ":"テ","ﾄ":"ト","ﾅ":"ナ","ﾆ":"ニ","ﾇ":"ヌ","ﾈ":"ネ","ﾉ":"ノ","ﾊ":"ハ","ﾋ":"ヒ","ﾌ":"フ","ﾍ":"ヘ","ﾎ":"ホ","ﾏ":"マ","ﾐ":"ミ","ﾑ":"ム","ﾒ":"メ","ﾓ":"モ","ﾔ":"ヤ","ﾕ":"ユ","ﾖ":"ヨ","ﾗ":"ラ","ﾘ":"リ","ﾙ":"ル","ﾚ":"レ","ﾛ":"ロ","ﾜ":"ワ","ﾝ":"ン","ウ゛":"ヴ","ﾞ":"゛","ﾟ":"゜"}
		},
		mark: {
			full: {"”":'"',"“":'"',"＃":"#","＄":"$","％":"%","＆":"&","’":"'","｜":"|","－":"-","＾":"^","￥":"\\","｀":"`","｛":"{","＠":"@","［":"[","＋":"+","＊":"*","｝":"}","；":";","：":":","］":"]","＜":"<","＞":">","＿":"_","．":".","，":",","（":"(","）":")","「":"｢","」":"｣","・":"･","！":"!","？":"?","：":":","／":"/","ー":"ｰ","【":"『","】":"』"},
			half: {'"':"”",'"':"“","#":"＃","$":"＄","%":"％","&":"＆","'":"’","|":"｜","-":"－","^":"＾","\\":"￥","`":"｀","{":"｛","@":"＠","[":"［","+":"＋","*":"＊","}":"｝",";":"；",":":"：","]":"］","<":"＜",">":"＞","_":"＿",".":"．",",":"，","(":"（",")":"）","｢":"「","｣":"」","･":"・","!":"！","?":"？",":":"：","/":"／","ｰ":"ー","『":"【","』":"】"}
		}
	};
	this._normalizeTable = {
		lite: {
			//■■置換元が1文字で対応できるもの■■
			//半角アルファベット類と全角小文字アルファベットを全て全角大文字アルファベットへ
			'A':'Ａ','a':'Ａ','ａ':'Ａ',
			'B':'Ｂ','b':'Ｂ','ｂ':'Ｂ',
			'C':'Ｃ','c':'Ｃ','ｃ':'Ｃ',
			'D':'Ｄ','d':'Ｄ','ｄ':'Ｄ',
			'E':'Ｅ','e':'Ｅ','ｅ':'Ｅ',
			'F':'Ｆ','f':'Ｆ','ｆ':'Ｆ',
			'G':'Ｇ','g':'Ｇ','ｇ':'Ｇ',
			'H':'Ｈ','h':'Ｈ','ｈ':'Ｈ',
			'I':'Ｉ','i':'Ｉ','ｉ':'Ｉ',
			'J':'Ｊ','j':'Ｊ','ｊ':'Ｊ',
			'K':'Ｋ','k':'Ｋ','ｋ':'Ｋ',
			'L':'Ｌ','l':'Ｌ','ｌ':'Ｌ',
			'M':'Ｍ','m':'Ｍ','ｍ':'Ｍ',
			'N':'Ｎ','n':'Ｎ','ｎ':'Ｎ',
			'O':'Ｏ','o':'Ｏ','ｏ':'Ｏ',
			'P':'Ｐ','p':'Ｐ','ｐ':'Ｐ',
			'Q':'Ｑ','q':'Ｑ','ｑ':'Ｑ',
			'R':'Ｒ','r':'Ｒ','ｒ':'Ｒ',
			'S':'Ｓ','s':'Ｓ','ｓ':'Ｓ',
			'T':'Ｔ','t':'Ｔ','ｔ':'Ｔ',
			'U':'Ｕ','u':'Ｕ','ｕ':'Ｕ',
			'V':'Ｖ','v':'Ｖ','ｖ':'Ｖ',
			'W':'Ｗ','w':'Ｗ','ｗ':'Ｗ',
			'X':'Ｘ','x':'Ｘ','ｘ':'Ｘ',
			'Y':'Ｙ','y':'Ｙ','ｙ':'Ｙ',
			'Z':'Ｚ','z':'Ｚ','ｚ':'Ｚ',
			//ギリシャ文字とキリル文字を置換（ただし語学的な理由ではなく見た目上の理由で）
			//この辺は需要も謎なので適当
			'Α':'Ａ','α':'Ａ','а':'Ａ','А':'Ａ',
			'Β':'Ｂ','β':'Ｂ','в':'Ｂ','В':'Ｂ','Б':'Ｂ','б':'Ｂ',
			'Δ':'△','δ':'Ｄ','д':'Ｄ','Д':'Ｄ',
			'Ε':'Ｅ','ε':'Ｅ','е':'Ｅ','ё':'Ｅ','Е':'Ｅ','Ё':'Ｅ',
			'Η':'Ｈ','η':'Ｈ',
			'Ι':'Ｉ','ι':'Ｉ',
			'Κ':'Ｋ','κ':'Ｋ',
			'μ':'Ｍ','Μ':'Ｍ',
			'ν':'Ｎ','Ν':'Ｎ',
			'ο':'Ｏ','Ο':'Ｏ',
			'ρ':'Ｐ','Ρ':'Ｐ',
			'τ':'Ｔ','Τ':'Ｔ',
			'χ':'Ｘ','Χ':'Ｘ',
			'υ':'Ｙ','Υ':'Ｙ',
			'ζ':'Ｚ','Ζ':'Ｚ',
			//半角数字を全て全角数字へ
			'0':'０','1':'１','2':'２','3':'３','4':'４',
			'5':'５','6':'６','7':'７','8':'８','9':'９',
			//半角で入力可能な記号を全て全角へ
			'!':'！',
			'"':'”',
			'#':'＃',
			'$':'＄',
			'%':'％',
			'&':'＆',
			'\'':'’',
			'(':'「',
			')':'」',
			'-':'－',
			'=':'＝',
			'^':'＾',
			'~':'～',
			'\\':'￥',
			'|':'｜',
			'@':'＠',
			'`':'‘',
			'[':'「',
			'{':'「',
			']':'」',
			'}':'」',
			':':'：',
			'*':'＊',
			';':'；',
			'+':'＋',
			'_':'＿',
			'/':'／',
			'?':'？',
			'.':'．',
			',':'，',
			'<':'「',
			'>':'」',
			//間違いやすい文字を全てアルファベットのオーに
			'○':'Ｏ', //一般的な丸
			'〇':'Ｏ', //漢数字のゼロ
			'◯':'Ｏ', //Unicode Large Circle
			'●':'Ｏ',
			//全角記号のカッコ類を全部かぎカッコへ
			'［':'「','］':'」',
			'『':'「','』':'」',
			'（':'「','）':'」',
			'〔':'「','〕':'」',
			'｛':'「','｝':'」',
			'〈':'「','〉':'」',
			'《':'「','》':'」',
			'＜':'「','＞':'」',
			'【':'「','】':'」',
			//置換元が1文字で対応できる範囲の半角／全角カナ
			//小さい文字があるパターンは全部大きい文字へ置換
			'ｰ':'ー',
			'ﾞ':'゛',
			'ﾟ':'゜',
			'ｱ':'ア','ｧ':'ァ',
			'ｲ':'イ','ｨ':'ィ',
			'ｳ':'ウ','ｩ':'ゥ',
			'ｴ':'エ','ｪ':'ェ',
			'ｵ':'オ','ｫ':'ォ',
			'ｶ':'カ',
			'ｷ':'キ',
			'ｸ':'ク',
			'ｹ':'ケ',
			'ｺ':'コ',
			'ｻ':'サ',
			'ｼ':'シ',
			'ｽ':'ス',
			'ｾ':'セ',
			'ｿ':'ソ',
			'ﾀ':'タ',
			'ﾁ':'チ',
			'ﾂ':'ツ','ｯ':'ッ',
			'ﾃ':'テ',
			'ﾄ':'ト',
			'ﾅ':'ナ',
			'ﾆ':'ニ',
			'ﾇ':'ヌ',
			'ﾈ':'ネ',
			'ﾉ':'ノ',
			'ﾊ':'ハ',
			'ﾋ':'ヒ',
			'ﾌ':'フ',
			'ﾍ':'ヘ',
			'ﾎ':'ホ',
			'ﾏ':'マ',
			'ﾐ':'ミ',
			'ﾑ':'ム',
			'ﾒ':'メ',
			'ﾓ':'モ',
			'ﾔ':'ヤ','ｬ':'ャ',
			'ﾕ':'ユ','ｭ':'ュ',
			'ﾖ':'ヨ','ｮ':'ョ',
			'ﾗ':'ラ',
			'ﾘ':'リ',
			'ﾙ':'ル',
			'ﾚ':'レ',
			'ﾛ':'ロ',
			'ﾜ':'ワ',
			'ｦ':'ヲ',
			'ﾝ':'ン',

			//■■置換元が2文字で対応できるもの■■

			//全角カナ／かな(濁点が別になってるパターン)
			'ウ゛':'ヴ',
			'カ゛':'ガ','キ゛':'ギ','ク゛':'グ','ケ゛':'ゲ','コ゛':'ゴ',
			'サ゛':'ザ','シ゛':'ジ','ス゛':'ズ','セ゛':'ゼ','ソ゛':'ゾ',
			'タ゛':'ダ','チ゛':'ヂ','ツ゛':'ヅ','テ゛':'デ','ト゛':'ド',
			'ハ゛':'バ','ヒ゛':'ビ','フ゛':'ブ','ヘ゛':'ベ','ホ゛':'ボ',
			'ハ゜':'パ','ヒ゜':'ピ','フ゜':'プ','ヘ゜':'ペ','ホ゜':'ポ',
			'う゛':'ヴ', //ひらがなのはスタンダードじゃないから使わない
			'か゛':'が','き゛':'ぎ','く゛':'ぐ','け゛':'げ','こ゛':'ご',
			'さ゛':'ざ','し゛':'じ','す゛':'ず','せ゛':'ぜ','そ゛':'ぞ',
			'た゛':'だ','ち゛':'ぢ','つ゛':'づ','て゛':'で','と゛':'ど',
			'は゛':'ば','ひ゛':'び','ふ゛':'ぶ','へ゛':'べ','ほ゛':'ぼ',
			'は゜':'ぱ','ひ゜':'ぴ','ふ゜':'ぷ','へ゜':'ぺ','ほ゜':'ぽ'
		},
		over: {
			//■■置換元が1文字で対応できるもの■■
			//半角アルファベット類と全角小文字アルファベットを全て全角大文字アルファベットへ
			'A':'Ａ','a':'Ａ','ａ':'Ａ',
			'B':'Ｂ','b':'Ｂ','ｂ':'Ｂ',
			'C':'Ｃ','c':'Ｃ','ｃ':'Ｃ',
			'D':'Ｄ','d':'Ｄ','ｄ':'Ｄ',
			'E':'Ｅ','e':'Ｅ','ｅ':'Ｅ',
			'F':'Ｆ','f':'Ｆ','ｆ':'Ｆ',
			'G':'Ｇ','g':'Ｇ','ｇ':'Ｇ',
			'H':'Ｈ','h':'Ｈ','ｈ':'Ｈ',
			'I':'Ｉ','i':'Ｉ','ｉ':'Ｉ',
			'J':'Ｊ','j':'Ｊ','ｊ':'Ｊ',
			'K':'Ｋ','k':'Ｋ','ｋ':'Ｋ',
			'L':'Ｌ','l':'Ｌ','ｌ':'Ｌ',
			'M':'Ｍ','m':'Ｍ','ｍ':'Ｍ',
			'N':'Ｎ','n':'Ｎ','ｎ':'Ｎ',
			'O':'Ｏ','o':'Ｏ','ｏ':'Ｏ',
			'P':'Ｐ','p':'Ｐ','ｐ':'Ｐ',
			'Q':'Ｑ','q':'Ｑ','ｑ':'Ｑ',
			'R':'Ｒ','r':'Ｒ','ｒ':'Ｒ',
			'S':'Ｓ','s':'Ｓ','ｓ':'Ｓ',
			'T':'Ｔ','t':'Ｔ','ｔ':'Ｔ',
			'U':'Ｕ','u':'Ｕ','ｕ':'Ｕ',
			'V':'Ｖ','v':'Ｖ','ｖ':'Ｖ',
			'W':'Ｗ','w':'Ｗ','ｗ':'Ｗ',
			'X':'Ｘ','x':'Ｘ','ｘ':'Ｘ',
			'Y':'Ｙ','y':'Ｙ','ｙ':'Ｙ',
			'Z':'Ｚ','z':'Ｚ','ｚ':'Ｚ',
			//ギリシャ文字とキリル文字を置換（ただし語学的な理由ではなく見た目上の理由で）
			//この辺は需要も謎なので適当
			'Α':'Ａ','α':'Ａ','а':'Ａ','А':'Ａ',
			'Β':'Ｂ','β':'Ｂ','в':'Ｂ','В':'Ｂ','Б':'Ｂ','б':'Ｂ',
			'Δ':'△','δ':'Ｄ','д':'Ｄ','Д':'Ｄ',
			'Ε':'Ｅ','ε':'Ｅ','е':'Ｅ','ё':'Ｅ','Е':'Ｅ','Ё':'Ｅ',
			'Η':'Ｈ','η':'Ｈ',
			'Ι':'Ｉ','ι':'Ｉ',
			'Κ':'Ｋ','κ':'Ｋ',
			'μ':'Ｍ','Μ':'Ｍ',
			'ν':'Ｎ','Ν':'Ｎ',
			'ο':'Ｏ','Ο':'Ｏ',
			'ρ':'Ｐ','Ρ':'Ｐ',
			'τ':'Ｔ','Τ':'Ｔ',
			'χ':'Ｘ','Χ':'Ｘ',
			'υ':'Ｙ','Υ':'Ｙ',
			'ζ':'Ｚ','Ζ':'Ｚ',
			//半角数字を全て全角数字へ
			'0':'０','1':'１','2':'２','3':'３','4':'４',
			'5':'５','6':'６','7':'７','8':'８','9':'９',
			//半角で入力可能な記号を全て全角へ
			'!':'！',
			'"':'”',
			'#':'＃',
			'$':'＄',
			'%':'％',
			'&':'＆',
			'\'':'’',
			'(':'「',
			')':'」',
			'-':'－',
			'=':'＝',
			'^':'＾',
			'~':'～',
			'\\':'￥',
			'|':'｜',
			'@':'＠',
			'`':'‘',
			'[':'「',
			'{':'「',
			']':'」',
			'}':'」',
			':':'：',
			'*':'＊',
			';':'；',
			'+':'＋',
			'_':'＿',
			'/':'／',
			'?':'？',
			'.':'．',
			',':'，',
			'<':'「',
			'>':'」',
			//間違いやすい文字を全てアルファベットのオーに
			'○':'Ｏ', //一般的な丸
			'〇':'Ｏ', //漢数字のゼロ
			'◯':'Ｏ', //Unicode Large Circle
			'●':'Ｏ',
			//全角記号のカッコ類を全部かぎカッコへ
			'［':'「','］':'」',
			'『':'「','』':'」',
			'（':'「','）':'」',
			'〔':'「','〕':'」',
			'｛':'「','｝':'」',
			'〈':'「','〉':'」',
			'《':'「','》':'」',
			'＜':'「','＞':'」',
			'【':'「','】':'」',
			//置換元が1文字で対応できる範囲の半角／全角カナ
			//小さい文字があるパターンは全部大きい文字へ置換
			'ｰ':'ー',
			'ﾞ':'゛',
			'ﾟ':'゜',
			'ｱ':'あ','ｧ':'あ','ア':'あ','ァ':'あ',
			'ｲ':'い','ｨ':'い','イ':'い','ィ':'い',
			'ｳ':'う','ｩ':'う','ウ':'う','ゥ':'う',
			'ｴ':'え','ｪ':'え','エ':'え','ェ':'え',
			'ｵ':'お','ｫ':'お','オ':'お','ォ':'お',
			'ｶ':'か','カ':'か','ガ':'が','ヵ':'か',
			'ｷ':'き','キ':'き','ギ':'ぎ',
			'ｸ':'く','ク':'く','グ':'ぐ',
			'ｹ':'け','ケ':'け','ゲ':'げ','ヶ':'け',
			'ｺ':'こ','コ':'こ','ゴ':'ご',
			'ｻ':'さ','サ':'さ','ザ':'ざ',
			'ｼ':'し','シ':'し','ジ':'じ',
			'ｽ':'す','ス':'す','ズ':'ず',
			'ｾ':'せ','セ':'せ','ゼ':'ぜ',
			'ｿ':'そ','ソ':'そ','ゾ':'ぞ',
			'ﾀ':'た','タ':'た','ダ':'だ',
			'ﾁ':'ち','チ':'ち','ヂ':'ぢ',
			'ﾂ':'つ','ツ':'つ','ヅ':'づ','ｯ':'つ','ッ':'つ',
			'ﾃ':'て','テ':'て','デ':'で',
			'ﾄ':'と','ト':'と','ド':'ど',
			'ﾅ':'な','ナ':'な',
			'ﾆ':'に','ニ':'に',
			'ﾇ':'ぬ','ヌ':'ぬ',
			'ﾈ':'ね','ネ':'ね',
			'ﾉ':'の','ノ':'の',
			'ﾊ':'は','ハ':'は','バ':'ば','パ':'ぱ',
			'ﾋ':'ひ','ヒ':'ひ','ビ':'び','ピ':'ぴ',
			'ﾌ':'ふ','フ':'ふ','ブ':'ぶ','プ':'ぷ',
			'ﾍ':'へ','ヘ':'へ','ベ':'べ','ペ':'ぺ',
			'ﾎ':'ほ','ホ':'ほ','ボ':'ぼ','ポ':'ぽ',
			'ﾏ':'ま','マ':'ま',
			'ﾐ':'み','ミ':'み',
			'ﾑ':'む','ム':'む',
			'ﾒ':'め','メ':'め',
			'ﾓ':'も','モ':'も',
			'ﾔ':'や','ｬ':'や','ヤ':'や','ャ':'や',
			'ﾕ':'ゆ','ｭ':'ゆ','ユ':'ゆ','ュ':'ゆ',
			'ﾖ':'よ','ｮ':'よ','ヨ':'よ','ョ':'よ',
			'ﾗ':'ら','ラ':'ら',
			'ﾘ':'り','リ':'り',
			'ﾙ':'る','ル':'る',
			'ﾚ':'れ','レ':'れ',
			'ﾛ':'ろ','ロ':'ろ',
			'ﾜ':'わ','ヮ':'わ',
			'ヰ':'い',
			'ヱ':'え',
			'ｦ':'を','ヲ':'を',
			'ﾝ':'ん','ン':'ん',

			//ひらがなで変換が必要な要素
			//小さい文字は全て大きい文字へ
			'ぁ':'あ',
			'ぃ':'い',
			'ぅ':'う',
			'ぇ':'え',
			'ぉ':'お',
			'っ':'つ',
			'ゃ':'や',
			'ゅ':'ゆ',
			'ょ':'よ',
			'ゎ':'わ',
			'ゐ':'い',
			'ゑ':'え',
			'を':'お',

			//■■置換元が2文字で対応できるもの■■
			//この変換処理は上の処理よりも後にくるので、
			//カタカナなどは既に存在しないと考えていい

			//全角かな(濁点が別になってるパターン)
			'う゛':'ヴ',
			'か゛':'が','き゛':'ぎ','く゛':'ぐ','け゛':'げ','こ゛':'ご',
			'さ゛':'ざ','し゛':'じ','す゛':'ず','せ゛':'ぜ','そ゛':'ぞ',
			'た゛':'だ','ち゛':'ぢ','つ゛':'づ','て゛':'で','と゛':'ど',
			'は゛':'ば','ひ゛':'び','ふ゛':'ぶ','へ゛':'べ','ほ゛':'ぼ',
			'は゜':'ぱ','ひ゜':'ぴ','ふ゜':'ぷ','へ゜':'ぺ','ほ゜':'ぽ',

			//音引き(前の文字がないと何に置換すればいいのかわからないため)
			'あー':'ああ',
			'かー':'かあ','がー':'があ',
			'さー':'さあ','ざー':'ざあ',
			'たー':'たあ','だー':'だあ',
			'なー':'なあ',
			'はー':'はあ','ばー':'ばあ','ぱー':'ぱあ',
			'まー':'まあ',
			'やー':'やあ',
			'らー':'らあ',
			'わー':'わあ',
			'いー':'いい',
			'きー':'きい','ぎー':'ぎい',
			'しー':'しい','じー':'じい',
			'ちー':'ちい','ぢー':'ぢい',
			'にー':'にい',
			'ひー':'ひい','びー':'びい','ぴー':'ぴい',
			'みー':'みい',
			'りー':'りい',
			'うー':'うう',
			'くー':'くう','ぐー':'ぐう',
			'すー':'すう','ずー':'ずう',
			'つー':'つう','づー':'づう',
			'ぬー':'ぬう',
			'ふー':'ふう','ぶー':'ぶう','ぷー':'ぷう',
			'むー':'むう',
			'ゆー':'ゆう',
			'るー':'るう',
			'えー':'ええ',
			'けー':'けえ','げー':'げえ',
			'せー':'せえ','ぜー':'ぜえ',
			'てー':'てえ','でー':'でえ',
			'ねー':'ねえ',
			'へー':'へえ','べー':'べえ','ぺー':'ぺえ',
			'めー':'めえ',
			'れー':'れえ',
			'おー':'おお',
			'こー':'こお','ごー':'ごお',
			'そー':'そお','ぞー':'ぞお',
			'とー':'とお','どー':'どお',
			'のー':'のお',
			'ほー':'ほお','ぼー':'ぼお','ぽー':'ぽお',
			'もー':'もお',
			'よー':'よお',
			'ろー':'ろお',
			'んー':'んん'
		}
	};
};

/**
 * 文字列の類似性を見積もる
 *
 * @param string 比較する文字列
 * @param string 比較する文字列
 * @return object 類似度データ
 */
klass.prototype.similarText = function(text1, text2)
{
	function similar_char(text1, len1, text2, len2)
	{
		function similar_str(text1, len1, text2, len2)
		{
			var pos1 = 0, pos2 = 0, max = 0, i, j, l;

			for (i = 0; i < len1; ++i)
			{
				for (j = 0; j < len2; ++j)
				{
					for (l = 0; (i + l < len1)&&(j + l < len2)&&(text1.charAt(i+l) == text2.charAt(j+l)); ++l);
					if (l > max)
					{
						max = l;
						pos1 = i;
						pos2 = j;
					}
				}
			}

			return {
				pos1: pos1,
				pos2: pos2,
				max: max
			};
		}

		var r = similar_str(text1, len1, text2, len2);
		var sum = r.max;
		if (sum)
		{
			if (r.pos1 && r.pos2)
			{
				sum += similar_char(text1, r.pos1, text2, r.pos2);
			}
			if((r.pos1 + r.max < len1)&&(r.pos2 + r.max < len2))
			{
				sum += similar_char(
					text1.substr(r.pos1 + r.max),
					len1 - r.pos1 - r.max,
					text2.substr(r.pos2 + r.max),
					len2 - r.pos2 - r.max);
			}
		}
		return sum;
	}

	var sim = similar_char(text1, text1.length, text2, text2.length);
	return {
		similar: sim,
		percent: sim * 200.0 / (text1.length + text2.length)
	};
};

/**
 * 文字列の類似性を見積もる
 * （レーベンシュタイン距離）
 *
 * @param string 比較する文字列
 * @param string 比較する文字列
 * @param int 文字列挿入のコスト（省略可）
 * @param int 文字列置換のコスト（省略可）
 * @param int 文字列削除のコスト（省略可）
 * @return int 編集距離
 */
klass.prototype.levenshtein = function(s1, s2, cost_ins, cost_rep, cost_del)
{
	if (typeof cost_ins == "undefined") cost_ins = 1;
	if (typeof cost_rep == "undefined") cost_rep = 1;
	if (typeof cost_del == "undefined") cost_del = 1;

	var l1 = s1.length, l2 = s2.length;
	var p1, p2, tmp, i1, i2, j1, j2, cp1, cp2, c0, c1, c2, ch1, ch2;

	if (l1 == 0) {
		return l2 * cost_ins;
	}
	if (l2 == 0) {
		return l1 * cost_del;
	}

	p1 = new Array(l2 + 1);
	p2 = new Array(l2 + 1);

	for (i2 = 0; i2 <= l2; i2++) {
		p1[i2] = i2 * cost_ins;
	}
	for (i1 = 0, j1 = 0; i1 < l1; i1++) {
		p2[0] = p1[0] + cost_del;
		for (i2 = 0, j2 = 0; i2 < l2; i2++) {
			c0 = p1[i2] + (s1.charAt(i1) == s2.charAt(i2) ? 0 : cost_rep);

			c1 = p1[i2 + 1] + cost_del;
			if (c1 < c0) {
				c0 = c1;
			}
			c2 = p2[i2] + cost_ins;
			if (c2 < c0) {
				c0 = c2;
			}
			p2[i2 + 1] = c0;
		}
		tmp = p1;
		p1 = p2;
		p2 = tmp;
	}
	c0 = p1[l2];

	return c0;
};

/**
 * 文字列の類似性を見積もる
 * （Jaro-Winkler距離）
 *
 * @param string 比較する文字列
 * @param string 比較する文字列
 * @return float 編集距離
 */
klass.prototype.jarowinkler = function (s1, s2)
{
	var threshold = 0.7;

	var max, min;
	if (s1.length > s2.length)
	{
		max = s1;
		min = s2;
	}
	else
	{
		max = s2;
		min = s1;
	}

	var range = Math.max(max.length / 2 - 1, 0);
	var matchIndexes = new Array(min.length);
	for (var i = 0; i < matchIndexes.length; ++i){ matchIndexes[i] = -1; }
	var matchFlags = new Array(max.length);
	var matches = 0;

	for(var mi = 0; mi < min.length; mi++)
	{
		var c1 = min.charAt(mi);
		for(var xi = Math.max(mi - range, 0), xn = Math.min(mi + range + 1, max.length); xi < xn; xi++)
		{
			if ((!matchFlags[xi])&&(c1 == max.charAt(xi)))
			{
				matchIndexes[mi] = xi;
				matchFlags[xi] = true;
				matches++;
				break;
			}
		}
	}

	var ms1 = new Array(matches);
	var ms2 = new Array(matches);
	for (var i = 0, si = 0; i < min.length; ++i)
	{
		if (matchIndexes[i] != -1)
		{
			ms1[si] = min.charAt(i);
			++si;
		}
	}
	for (var i = 0, si = 0; i < max.length; ++i)
	{
		if (matchFlags[i])
		{
			ms2[si] = max.charAt(i);
			++si;
		}
	}

	var transpositions = 0;
	for (var mi = 0; mi < ms1.length; ++mi)
	{
		if (ms1[mi] != ms2[mi])
		{
			++transpositions;
		}
	}

	var prefix = 0;
	for (var mi = 0; mi < min.length; ++mi)
	{
		if(s1.charAt(mi) == s2.charAt(mi))
		{
			++prefix;
		}
		else
		{
			break;
		}
	}

	if (matches == 0)
	{
		return 0;
	}

	var m = matches;
	var j = ((m / s1.length + m / s2.length + (m - (transpositions / 2)) / m)) / 3;
	return j < threshold ? j : j + Math.min(0.1, 1.0/max.length) * prefix * (1 - j);
};

/**
 * 文字列を置換する
 *
 * @param string 変換対象文字列
 * @param array 変換元がキー、変換先が値の連想配列
 * @return string 変換後の文字列
 */
klass.prototype._textReplace = function(s, table)
{
	if (s == '') return ''; //空は処理しない

	var ret = "", charReplace = function (c){ return table[c] || c; }

	for(var i = 1, len = s.length, c1 = charReplace(s.charAt(0)), c2; i < len; ++i)
	{
		var tc = table[c1 + (c2 = charReplace(s.charAt(i)))];
		if (tc)
		{
			ret += tc;
			c1 = charReplace(s.charAt(++i));
		}
		else
		{
			ret += c1;
			c1 = c2;
		}
	}
	return ret + c1;
};

/**
 * 数字を半角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.numberToHalf = function(s)
{
	return this._textReplace(s, this._convertTable.number.full);
};

/**
 * 数字を全角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.numberToFull = function(s)
{
	return this._textReplace(s, this._convertTable.number.half);
};

/**
 * アルファベットを半角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.alphabetToHalf = function(s)
{
	return this._textReplace(s, this._convertTable.alphabet.full);
};

/**
 * アルファベットを全角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.alphabetToFull = function(s)
{
	return this._textReplace(s, this._convertTable.alphabet.half);
};

/**
 * カタカナを半角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.katakanaToHalf = function(s)
{
	return this._textReplace(s, this._convertTable.katakana.full);
};

/**
 * カタカナを全角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.katakanaToFull = function(s)
{
	return this._textReplace(s, this._convertTable.katakana.half);
};

/**
 * 記号を半角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.markToHalf = function(s)
{
	return this._textReplace(s, this._convertTable.mark.full);
};

/**
 * 記号を全角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.markToFull = function(s)
{
	return this._textReplace(s, this._convertTable.mark.half);
};

/**
 * テーブルにある全ての文字を半角にする
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.toHalf = function(s)
{
	return this.markToHalf(
		this.katakanaToHalf(
			this.alphabetToHalf(
				this.numberToHalf(s)
			)
		)
	);
};

/**
 * テーブルにある全ての文字を全角にする
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.toFull = function(s)
{
	return this.markToFull(
		this.katakanaToFull(
			this.alphabetToFull(
				this.numberToFull(s)
			)
		)
	);
};

/**
 * 英数字は半角、それ以外は全角に変換する
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.normalize = function(s)
{
	return this.markToFull(
		this.katakanaToFull(
			this.alphabetToHalf(
				this.numberToHalf(s)
			)
		)
	);
};

/**
 * 日本語のブレを過剰気味に整える
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.similarNormalizeOver = function(s)
{
	return this._textReplace(s, this._normalizeTable.over);
};

/**
 * 日本語のブレをある程度整える
 *
 * @param string 変換対象文字列
 * @return string 変換後の文字列
 */
klass.prototype.similarNormalizeLite = function(s)
{
	return this._textReplace(s, this._normalizeTable.lite);
};

/**
 * 変換テーブルなどに変更を加える必要がない場合は
 * textConverter.getInstance() で使えるように
 * @return Object textConverterのインスタンス
 */
var instance = null;
klass.getInstance = function(){
	if (!instance) instance = new klass();
	return instance;
};

})((function(){ return this; })());
